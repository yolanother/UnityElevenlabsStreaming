using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DoubTech.AI.ThirdParty.ElevenLabs.Streaming.Data;
using Doubtech.ElevenLabs.Streaming;
using Doubtech.ElevenLabs.Streaming.Data;
using Doubtech.ElevenLabs.Streaming.Interfaces;
using DoubTech.Elevenlabs.Streaming.NativeWebSocket;
using DoubTech.ElevenLabs.Streaming.Threading;
using Meta.WitAi.Attributes;
using Newtonsoft.Json;
using UnityEditor;
using UnityEngine;

namespace DoubTech.ElevenLabs.Streaming
{
    /// <summary>
    /// Handles the WebSocket connection to Eleven Labs, sending and receiving streamed audio messages.
    /// </summary>
    public class ElevenLabsWebsocketStreamer : BaseAsyncMonoBehaviour
    {
        [Header("Eleven Labs")]
        [Tooltip("Configuration settings for Eleven Labs API.")]
        [SerializeField] private ElevenLabsConfig config;

        [Header("Audio Player")] [Tooltip("Audio player used for outputting audio")]
        #if VOICESDK
        [ObjectType(typeof(IStreamedAudioPlayer))]
        #endif
        [SerializeField] private MonoBehaviour streamedAudioPlayer;

        [Header("Debugging")]
        [Tooltip("If true, debug files will be written when audio is received from the server.")]
        [SerializeField] private bool writeDebugFile;

        private WebSocket ws;
        private Queue<AudioRequest> messageQueue = new();
        private Queue<AudioRequest> activeRequests = new();
        private TaskCompletionSource<bool> _connected;
        private FileStream debugStream;
        private FileStream responseStream;

        private bool isProcessingQueue = false;
        private bool _initialMessageSent;

        private IStreamedAudioPlayer audioPlayer;
        private TaskCompletionSource<bool> _messageQueueTask;

        private float timeout = .25f;
        private Coroutine enforcedTimeCoroutine;

        private bool IsConnected => ws?.State == WebSocketState.Open;

        private void OnValidate()
        {
            if (!streamedAudioPlayer) streamedAudioPlayer = GetComponentInChildren<IStreamedAudioPlayer>() as MonoBehaviour;
        }

        protected override void Awake()
        {
            base.Awake();
            if (streamedAudioPlayer) audioPlayer = streamedAudioPlayer.GetComponent<IStreamedAudioPlayer>();
            else audioPlayer = GetComponent<IStreamedAudioPlayer>();
        }

        private async void Update()
        {
            ws?.DispatchMessageQueue();
        }

        private async void OnDestroy()
        {
            if (ws != null)
            {
                await ws.Close();
            }
        }

        /// <summary>
        /// Initiates a WebSocket connection.
        /// </summary>
        public void Connect()
        {
            ConnectToWebSocket();
        }

        /// <summary>
        /// Sends a message to be spoken by the Eleven Labs API.
        /// </summary>
        /// <param name="message">The message to be spoken.</param>
        public void Speak(string message)
        {
            audioPlayer.Stop();
            messageQueue.Clear();
            Enqueue(message);
            _ = ProcessMessageQueueAsync();
        }

        /// <summary>
        /// Sends a message to be spoken by the Eleven Labs API.
        /// </summary>
        /// <param name="message">The message to be spoken.</param>
        public async Task SpeakAsync(string message)
        {
            audioPlayer.Stop();
            messageQueue.Clear();
            var request = await SpeakQueuedAsync(message);
            await request.Task;
        }

        /// <summary>
        /// Queues a message to be spoken by the Eleven Labs API.
        /// </summary>
        /// <param name="message">The message to be queued and spoken.</param>
        public void SpeakQueued(string message)
        {
            Enqueue(message);
            _ = SpeakQueuedAsync(message);
        }

        /// <summary>
        /// Queues a message to be spoken by the Eleven Labs API.
        /// </summary>
        /// <param name="message">The message to be queued and spoken.</param>
        public async Task<AudioRequest> SpeakQueuedAsync(string message)
        {
            var request = Enqueue(message);
            await ProcessMessageQueueAsync();
            await request.Task;
            return request;
        }

        private AudioRequest Enqueue(string message)
        {
            var request = new AudioRequest()
            {
                message = message,
                charsRemaining = message.Length
            };
            request.onComplete += HandleComplete; 
            messageQueue.Enqueue(request);
            return request;
        }

        /// <summary>
        /// Stops the audio playback and clears the message queue.
        /// </summary>
        public void StopPlayback()
        {
            messageQueue.Clear();
            audioPlayer.Stop();
        }

        /// <summary>
        /// Pauses the audio playback.
        /// </summary>
        public void PausePlayback()
        {
            audioPlayer.Pause();
        }

        /// <summary>
        /// Sends a test message to the Eleven Labs API for playback.
        /// </summary>
        internal void PlayTestMessage()
        {
            var file = Path.Combine(Application.dataPath, "test.pcm");
            if (writeDebugFile) debugStream = new FileStream(file, FileMode.Create);

            ProcessMessage(
                "{\"audio\":\"AAACAAIAAQD///7//v/+//7//v///wAAAAAAAP//////////AAAAAAIAAgABAAIAAgABAAIAAgACAAIAAQABAAEAAAABAAEAAAABAAEAAQABAAEAAQABAAEAAAAAAAEAAQABAAEAAQABAAEAAQACAAEAAQABAAAAAAABAAEAAQABAAEAAgACAAIAAQABAAEAAgACAAIAAgACAAEAAQABAAEAAgACAAEAAQABAAEAAgABAAEAAQABAAIAAQABAAEAAQABAAEAAQABAAIAAgABAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAEAAQABAAEAAQACAAIAAQABAAEAAgACAAEAAQABAAEAAQACAAIAAQABAAEAAQABAAIAAgABAAIAAgACAAEAAQABAAEAAQACAAEAAQACAAIAAQABAAEAAQABAAIAAgACAAIAAgACAAIAAQABAAEAAgACAAEAAgACAAIAAgACAAIAAgACAAIAAgACAAMAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAwACAAIAAwACAAIAAgADAAIAAgADAAMAAwADAAMAAwADAAMAAwADAAIAAwADAAMAAwADAAMABAADAAMABAAEAAQAAwADAAQAAwACAAMAAwADAAMAAwADAAQABAADAAIAAwAEAAQABAAEAAMAAwADAAMABQAFAAUABQAEAAQABAADAAMAAwAEAAQAAwACAAMAAwADAAMAAwADAAMAAgADAAMAAgADAAMAAwADAAMAAwADAAMABAAEAAMAAwADAAQAAwADAAQAAwACAAMAAwADAAQABAADAAMAAgABAAIAAgACAAEAAQABAAEAAAABAAAA//8AAAAAAAD///3//v/+//3//v/+/////v/+//3//f/+//7//v/+//7////+//3///8AAP///v/9//3//v/+//7//v/+/////v///////v8AAAAA//8AAAAA//8AAAAAAAABAAEA//8AAAMAAwADAAMAAgACAAIAAQACAAIAAwADAAQABAADAAQAAwAEAAUABgAGAAYABQAFAAYABwAIAAgACAAIAAkACgAKAAkACgALAAoADAALAAkACwALAAsADAAKAAkACgAKAAoACQAIAAgACQAIAAgACAAJAAgABwAHAAUABQAHAAcABgAGAAQAAwABAAAAAgADAAIAAgAAAP3//P/7//r/+f/5//j/+f/6//r/+v/5//j/+P/4//b/9f/0//X/9f/0//T/9f/0//T/9f/0//X/9v/1//X/9f/2//b/9f/2//f/+f/6//j/9//5//j/+f/7//r/+f/4//j/+v/6//v///////7/AAD///3/AAD9//z/AQACAAMAAgACAAQABAABAAIAAgADAAIAAgAGAAUABQAEAAMABQAGAAgACQAJAAoACwANAA4ADgAPABEAEQASABQAFQAYAB0AHQAaABcAFQAVABUAFgAXABUAFQAWABUAFQAVABMAEgARABAADwANAA4ADgANAA0ACwAKAAsACQAHAAUABAADAAQAAQD+/wAAAQD///z/+P/4//f/9f/1//b/9v/0//L/8//1//H/7P/s/+//8f/t/+n/6v/r/+r/6v/r/+3/6//p/+r/6//q/+v/6//s/+7/7P/p/+f/6P/v/+//7f/s/+v/8P/x//D/8//y//T/+P/3//f/+f/7//z//f/7//r//f8AAAIAAwABAAMABgAIAAcABwAKAA0AEAAQAA4AEgAXABYAFwAYABgAGwAcAB0AHgAfACIAIwAhACIAIQAjACUAIAAgACMAIQAhACMAJAAjAB4AIAAiAB4AGwAdACAAHQAYABUAFwAUAA4AEAAPAAoACAAHAAUAAgD//wEAAgD8//n/+f/4//b/9P/0//L/8P/w//H/7f/q/+n/5//k/+H/5v/k/97/4f/g/9v/2P/W/9j/1//W/9f/2f/Y/9b/2v/d/9r/2f/a/9n/1//Y/9n/2v/d/9//3f/d/+D/4v/j/+T/5f/p/+3/7f/v//L/8//1//r//f/8//z/AAAEAAMABAAJAA8AEAAPABIAEwAVABcAFgAZAB0AIAAjACEAIwApACwAMAA0ADcAPQBBAEQASQBMAE4AUABMAEsAVABcAF8AWwBdAGUAaQBqAG4AeQCEAIEAfwCEAIwAkQCPAI4AjQCIAIMAegBwAGkAXwBbAFoAVgBSAEwASgBFAD0ANAAlABcAEAANAAoACAADAPX/4v/O/73/s/+m/5f/jv+F/3v/ef+B/4j/hv+D/3//a/9d/2b/av9e/1j/kf/d/6H/Mf8o/1H/YP8x/xP/Qf9l/1z/Xf91/33/ef98/3X/Y/9d/2b/df9//4P/jP+L/33/eP94/3L/dP+F/5v/q/+z/8j/5f/w/+j/4//s//X/+f8BAA8AIAAqACwAKQApACoAKgAuAC4AMQA/AEkATABXAGIAZgBmAFwAUABNAEwAUgBZAFMATQBWAFwASwA0AC0ANAAyAC0AMgA0ADQAMQAyADcAMQAmACAAHQAcAB4AHgAdABsAGQAaABoAFgAXABsAGwAhACkAMAA3AD4ASwBOAEcATgBaAFkATgBHAEsAVABZAFQAUgBdAGEAYQBdAFgAXABjAGYAaABmAGQAaQBsAGoAZABeAFoAVABOAEgASABIAEUAPwA1ADMANgA0ACwAKAAoACgAJgAkACUAHgAQAAkABwAEAPj/7P/r/+r/5//k/9//2P/T/87/yv/J/8n/x//B/73/wf/D/7r/tP+1/7P/rf+l/6H/pP+n/6n/rP+v/7H/rP+k/6X/qf+t/7H/s/+1/7b/uf+9/77/vf+8/8H/yP/N/83/zv/S/9b/2v/a/9j/2v/c/93/5f/o/+X/5P/n/+7/8f/w//D/8//2//T/9v///wcABQAEAAMA/f/+/wQACQAJAAAAAAACAAIACwARAAwACAACAAAABAAJAAwADgASABEACQAJAA4ADgAOAA0ACAAGAAgACwAQAA0ABgAFAAkABQAAAAQABwAFAAQABgAGAAUAAQD7//7/BAAFAAUA///7/wEABgACAAAA///+/wEAAgD9//7/AQD8//3/CQAIAAAABAAFAAIA/v/6/wEABwADAP///f/4//T/9/8AAAUA///8////AAAAAP///f///wMAAwD///3/AwAHAAMA/v/7/wEACAAFAAQACAAJAAYACAALAAwACQAGAAoAEAAQABAADgAQABIAEAAMAA8AEQAMAAoAEAAUABMAFAAXABQAEAAOAA8ADAAKABEAEgAPABIAEQAQAA4ADAANAA0ACwAMAA8AEAANAAsACwAOAA8ADAALAAwACwAHAAEAAQAFAAkACQAIAAUAAQABAAYABgAEAAQAAQD///////8DAAIA+v/6/wEABgABAP3//f/9//v/+f/6//v/+//5//j/+f/5//v/+//4//f/+f/8//j/9v/4//j/9f/y//P/9f/0//f/9v/w//D/9f/3//X/9f/2//j/9v/y//T/9v/0//X/9//1//X/9v/2//j/+P/2//f/9//2//f/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\",\"isFinal\":null,\"normalizedAlignment\":{\"chars\":[\" \",\"T\",\"e\",\"s\",\"t\",\" \"],\"charStartTimesMs\":[0,35,116,232,313,430],\"charDurationsMs\":[35,81,116,81,117,174]},\"alignment\":{\"chars\":[\"T\",\"e\",\"s\",\"t\",\" \"],\"charStartTimesMs\":[0,116,232,313,430],\"charDurationsMs\":[116,116,81,117,174]}}");
            ProcessMessage(
                "{\"audio\":\"\",\"isFinal\":null,\"normalizedAlignment\":null,\"alignment\":null}");

            
            if (writeDebugFile)
            {
                debugStream.Close();
                Debug.Log($"Wrote audio to: {file}");
            }
        }

        private async Task<AudioRequest> SendMessageToWebSocket(AudioRequest request, bool close = false)
        {
            if (!IsConnected) await ConnectToWebSocket();
            if (!IsConnected)
            {
                Debug.LogError("Connection was not established, message not sent.");
                return null;
            }
            activeRequests.Enqueue(request);

            if (!_initialMessageSent)
            {
                var initialMessage = new
                {
                    text = request.message,
                    voice_settings = new { stability = 0.5, similarity_boost = 0.8, use_speaker_boost = false },
                    generation_config = new { chunk_length_schedule = new List<int> { 120, 160, 250, 290 } },
                    xi_api_key = config.apiKey
                };
                await SendData(initialMessage);
                _initialMessageSent = true;
            }
            else
            {
                await SendData(new { text = request.message });
            }

            if (close) await SendCloseTextMessage();
            else
            {
                RunOnMainThread(() =>
                {
                    if (null != enforcedTimeCoroutine)
                    {
                        StopCoroutine(enforcedTimeCoroutine);
                    }

                    StartCoroutine(EnforceSpeechTimeout());
                });
            }
            
            return request;
        }

        private async Task SendCloseTextMessage()
        {
            await SendData(new { text = "" });
        }

        private IEnumerator EnforceSpeechTimeout()
        {
            yield return new WaitForSeconds(timeout);
            _ = SendCloseTextMessage();
            enforcedTimeCoroutine = null;
        }

        private async Task SendData(object messageData)
        {
            string messageJson = JsonConvert.SerializeObject(messageData);
            await ws.SendText(messageJson);
        }

        private Task ProcessMessageQueueAsync()
        {
            if (null != _messageQueueTask && !_messageQueueTask.Task.IsCompleted)
            {
                return _messageQueueTask.Task;
            }
            _messageQueueTask = new TaskCompletionSource<bool>();

            _ = RunOnBackground(async () =>
            {
                isProcessingQueue = true;
                while (messageQueue.Count > 0)
                {
                    var message = messageQueue.Dequeue();
                    await SendMessageToWebSocket(message);
                }
                isProcessingQueue = false;
                _messageQueueTask.SetResult(true);
                _messageQueueTask = null;
            });
            return _messageQueueTask.Task;
        }

        private Task<bool> ConnectToWebSocket()
        {
            if (IsConnected) return Task.FromResult(true);

            if (_connected != null && !_connected.Task.IsCompleted)
            {
                return _connected.Task;
            }

            _connected = new TaskCompletionSource<bool>();

            var headers = new Dictionary<string, string> { { "xi-api-key", config.apiKey } };
            ws = new WebSocket(config.Url, headers);

            ws.OnOpen += OnOpen;
            ws.OnMessage += OnMessage;
            ws.OnError += OnError;
            ws.OnClose += OnClose;

            RunOnBackground(ws.Connect);
            return _connected.Task;
        }

        private void ProcessMessage(string message)
        {
            var data = JsonConvert.DeserializeObject<AudioData>(message);
            if (!string.IsNullOrEmpty(data.Error))
            {
                OnError(data.Message);
                return;
            }
            if (null != data?.Audio)
            {
                var request = activeRequests.Peek();
                request.charsRemaining -= data.Alignment.Chars.Count;
                Debug.Log($"Processing {request.message} leaving {request.charsRemaining} characters to process.");
                // Combine the chars and log it
                Debug.Log("Chunk contains: " + string.Join("", data.Alignment.Chars));
                var events = new List<PlaybackEvent>();
                if (data.Alignment.CharStartTimesMs.First() == 0)
                {
                    events.Add(new PlaybackEvent(0, () => request.onPlaybackStarted?.Invoke(request)));
                }
                
                var startTime = data.Alignment.CharStartTimesMs[0];
                var endTime = data.Alignment.CharStartTimesMs[data.Alignment.CharStartTimesMs.Count - 1] + data.Alignment.CharDurationsMs[data.Alignment.CharDurationsMs.Count - 1];
                var length = endTime - startTime;
                
                for(int i = 0; i < data.Alignment.CharStartTimesMs.Count; i++)
                {
                    events.Add(new PlaybackEvent(length, () => request.onCharacterPlayed?.Invoke(request, i)));
                }
                
                if (request.charsRemaining <= 0)
                {
                    Debug.Log($"Enqueuing completion events at {length}");
                    events.Add(new PlaybackEvent(length, () => request.onPlaybackComplete?.Invoke(request)));
                    events.Add(new PlaybackEvent(length, () => request.onComplete?.Invoke(request)));
                }

                audioPlayer.AddData(data.Audio, 0, data.Audio.Length, events.ToArray());
                if (request.charsRemaining <= 0) activeRequests.Dequeue();

                debugStream?.Write(data?.Audio);
                responseStream?.Write(Encoding.UTF8.GetBytes(message + "\n"));

                RunOnMainThread(audioPlayer.Play);
            }
        }

        private void HandleComplete(AudioRequest request)
        {
            Debug.Log("Audio clip completed: " + request.message);
            if(!request.Task.IsCompleted) request.taskCompletionSource.SetResult(request);
            else Debug.LogError($"HandleComplete was called twice for {request.message}");
            request.onComplete -= HandleComplete;
        }

        private void OnOpen()
        {
            RunOnMainThread(() => StartCoroutine(WaitForConnection()));

            if (writeDebugFile)
            {
                debugStream = new FileStream(Path.Combine(Application.dataPath, "test.pcm"), FileMode.Create);
                responseStream = new FileStream(Path.Combine(Application.dataPath, "response.json"), FileMode.Create);
            }
        }

        private IEnumerator WaitForConnection()
        {
            yield return new WaitUntil(() => ws.State == WebSocketState.Open);
            _connected?.SetResult(true);
        }

        private void OnMessage(byte[] bytes)
        {
            string message = Encoding.UTF8.GetString(bytes);
            ProcessMessage(message);
        }

        private void OnError(string errorMsg)
        {
            if (activeRequests.Count > 0)
            {
                foreach (var request in activeRequests)
                {
                    request.onError?.Invoke(request, errorMsg);
                    request.onComplete?.Invoke(request);
                }
                activeRequests.Clear();
            }

            Debug.LogError(errorMsg);
        }

        private void OnClose(WebSocketCloseCode code)
        {
            if (activeRequests.Count > 0)
            {
                foreach (var request in activeRequests)
                {
                    request.onComplete?.Invoke(request);
                }
                activeRequests.Clear();
            }
            if (null != _connected && !_connected.Task.IsCompleted)
            {
                _connected?.SetResult(false);
            }

            _connected = null;
            _initialMessageSent = false;
            activeRequests.Clear();

            CloseStream(ref debugStream);
            CloseStream(ref responseStream);
        }

        private void CloseStream(ref FileStream stream)
        {
            if (stream == null) return;
            try
            {
                stream.Close();
                stream = null;
            }
            catch (Exception)
            {
                // Ignored
            }
        }
    }

#if UNITY_EDITOR
    [CustomEditor(typeof(ElevenLabsWebsocketStreamer))]
    public class ElevenLabsWebsocketStreamerEditor : Editor
    {
        private string speakMessage = "";
        private string speakQueuedMessage = "";

        public override void OnInspectorGUI()
        {
            DrawDefaultInspector();

            ElevenLabsWebsocketStreamer myScript = (ElevenLabsWebsocketStreamer)target;

            speakMessage = EditorGUILayout.TextField("Speak Message", speakMessage);
            if (GUILayout.Button("Speak"))
            {
                myScript.Speak(speakMessage);
            }

            speakQueuedMessage = EditorGUILayout.TextField("Speak Queued Message", speakQueuedMessage);
            if (GUILayout.Button("Speak Queued"))
            {
                myScript.SpeakQueued(speakQueuedMessage);
            }

            if (GUILayout.Button("Play Test Message"))
            {
                myScript.PlayTestMessage();
            }
        }
    }
#endif
}
